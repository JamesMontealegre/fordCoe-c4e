export declare class AuthoringUtils {
    private _apiDomain;
    /**
     * @private
     */
    constructor(domain: string | null);
    /**
     * @private
     */
    getApiDomain(): string | null;
    /**
     * Generates HTML markup.
     *
     * Example:
     * ```
     * import ModelManager, Constants, { AEM_MODE } from '@adobe/aem-spa-page-model-manager';
     *
     * // initialize `ModelManager`
     * await ModelManager.initialize();
     *
     * // check application state and add related tags
     * if (ModelManager.clientlibUtil.isStateActive(Constants.STATE_AUTHORING)) {
     *     const markup = ModelManager.clientlibUtil.getTagsForState(AEM_MODE.EDIT);
     *
     *     window.document.head.insertAdjacentHTML('beforeend', markup);
     * }
     * ```
     *
     * @returns HTML markup including state specific libraries.
     */
    getTagsForState(appState: string): string;
    /**
     * Returns string value of all the concatenated tags.
     * @returns Concatenated tags.
     */
    private generateElementString;
    /**
     * Checks status of requested state.
     * @returns `true` if application is in authoring state and AEM mode is `EDIT`.
     */
    static isStateActive(state: string): boolean;
    /**
     * Checks AEM mode.
     * @private
     * @returns AEM mode or `null`.
     */
    static getAemMode(): string | null;
    /**
     * Generates urls to authoring clientlibs.
     * @private
     * @returns Clientlib URLs.
     */
    generateClientLibUrls(): string[];
}
//# sourceMappingURL=AuthoringUtils.d.ts.map